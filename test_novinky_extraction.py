#!/usr/bin/env python3
"""
Test script pro ovƒõ≈ôen√≠ extrakce zdroje z konkr√©tn√≠ Novinky.cz str√°nky
"""

import asyncio
from playwright.async_api import async_playwright

async def test_single_page_extraction():
    """Otestuje extrakci z konkr√©tn√≠ str√°nky"""
    url = "https://www.novinky.cz/clanek/auto-skoda-poodhaluje-elektrickou-octavii-ostre-rezany-koncept-zaujme-i-netradicnimi-dvermi-40537197"
    expected_source = "≈†koda Auto"  # Oƒçek√°van√Ω zdroj
    
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=False)
        page = await browser.new_page()
        
        print(f"üîç Testuji extrakci ze str√°nky:")
        print(f"   URL: {url}")
        print(f"   Oƒçek√°van√Ω zdroj: {expected_source}")
        print()
        
        await page.goto(url)
        await page.wait_for_load_state('domcontentloaded')
        
        # Zkus odkliknout popup okno se souhlasem
        try:
            print("üîò Hled√°m a odklik√°v√°m popup okno...")
            # Mo≈æn√© selektory pro popup tlaƒç√≠tka
            popup_selectors = [
                "button:has-text('P≈ôijmout v≈°e')",
                "button:has-text('Souhlas√≠m')", 
                "button:has-text('P≈ôijmout')",
                "button:has-text('OK')",
                "[data-testid='accept-all']",
                ".cookie-accept",
                ".consent-accept",
                "#accept-cookies"
            ]
            
            for selector in popup_selectors:
                try:
                    element = page.locator(selector)
                    if await element.count() > 0:
                        await element.first.click()
                        print(f"‚úÖ Popup odkliknuto pomoc√≠: {selector}")
                        await asyncio.sleep(1)  # Poƒçkej na zav≈ôen√≠ popup
                        break
                except Exception as e:
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è Chyba p≈ôi odklik√°v√°n√≠ popup: {e}")
        
        await asyncio.sleep(3)  # Poƒçkej na naƒçten√≠ po zav≈ôen√≠ popup
        
        # Zkop√≠rujeme logiku z extract_video_info_fast.py
        video_info = None
        max_retries = 2
        
        for attempt in range(max_retries):
            try:
                print(f"üîÑ Pokus {attempt + 1}/{max_retries}")
                
                # 1. Zkusme standardn√≠ selektory
                selectors_to_try = [
                    ".f_bK",                 # Specifick√Ω selektor pro Novinky.cz - "Video: ≈†koda Auto"
                    "figcaption .f_bK",      # Je≈°tƒõ specifiƒçtƒõj≈°√≠ v figcaption
                    "span.f_bK",             # P≈ôesn√Ω span s t≈ô√≠dou f_bK
                    ".video-gallery__media-source",
                    ".article-author", 
                    ".author",
                    ".source",
                    ".video-source",
                    ".article-source",
                ]
                
                for selector in selectors_to_try:
                    try:
                        elements = page.locator(selector)
                        count = await elements.count()
                        print(f"üîç Selektor '{selector}': {count} element≈Ø")
                        
                        if count > 0:
                            for i in range(min(count, 3)):
                                element = elements.nth(i)
                                text = await element.text_content()
                                print(f"   Element {i}: '{text}'")
                                
                                if text and len(text.strip()) > 0:
                                    clean_text = text.strip()
                                    if 3 <= len(clean_text) <= 200:
                                        for prefix in ['Video:', 'Foto:', 'Zdroj:', 'Autor:']:
                                            if clean_text.startswith(prefix):
                                                clean_text = clean_text[len(prefix):].strip()
                                        
                                        if clean_text and len(clean_text) > 2:
                                            video_info = clean_text
                                            print(f"‚úÖ Nalezen zdroj pomoc√≠ '{selector}': {clean_text}")
                                            break
                            if video_info:
                                break
                                
                    except Exception as e:
                        print(f"‚ùå Chyba p≈ôi selektoru '{selector}': {e}")
                
                # 2. Hled√°n√≠ textu obsahuj√≠c√≠ho "Video:"
                if not video_info:
                    try:
                        print("üîç Hled√°m text obsahuj√≠c√≠ 'Video:'...")
                        video_elements = page.locator("*:has-text('Video:')")
                        count = await video_elements.count()
                        print(f"   Nalezeno {count} element≈Ø s 'Video:'")
                        
                        for i in range(min(count, 10)):  # Zkus prvn√≠ch 10
                            element = video_elements.nth(i)
                            text = await element.text_content()
                            print(f"   Element {i}: '{text[:100]}...'")
                            
                            if text and "Video:" in text:
                                lines = text.split('\n')
                                for line in lines:
                                    line = line.strip()
                                    if "Video:" in line and len(line) < 100:
                                        video_pos = line.find("Video:")
                                        if video_pos >= 0:
                                            source_part = line[video_pos + 6:].strip()
                                            if source_part and len(source_part) > 2:
                                                video_info = source_part
                                                print(f"‚úÖ Nalezen zdroj z 'Video:': {video_info}")
                                                break
                                if video_info:
                                    break
                    except Exception as e:
                        print(f"‚ùå Chyba p≈ôi hled√°n√≠ 'Video:': {e}")
                
                # 3. Hled√°n√≠ zn√°m√Ωch zdroj≈Ø
                if not video_info:
                    try:
                        print("üîç Hled√°m zn√°m√© zdroje...")
                        common_sources = ['≈†koda Auto', 'ƒåT24', 'ƒåTK', 'Reuters', 'AP', 'DPA', 'AFP']
                        for source in common_sources:
                            elements = page.locator(f"*:has-text('{source}')")
                            count = await elements.count()
                            if count > 0:
                                print(f"   Nalezeno {count} element≈Ø s '{source}'")
                                element = elements.first
                                text = await element.text_content()
                                if text and source in text:
                                    lines = text.split('\n')
                                    for line in lines:
                                        if source in line and len(line.strip()) < 100:
                                            video_info = line.strip()
                                            print(f"‚úÖ Nalezen zdroj podle kl√≠ƒçov√©ho slova '{source}': {video_info}")
                                            break
                                    if video_info:
                                        break
                            if video_info:
                                break
                    except Exception as e:
                        print(f"‚ùå Chyba p≈ôi hled√°n√≠ zn√°m√Ωch zdroj≈Ø: {e}")
                
                if video_info and len(video_info) > 3:
                    break
                    
            except Exception as e:
                print(f"‚ùå Pokus {attempt + 1} selhal: {e}")
                if attempt < max_retries - 1:
                    await asyncio.sleep(1)
        
        print("\n" + "="*60)
        print("üìä V√ùSLEDEK TESTU:")
        print(f"   Extrahovan√Ω zdroj: {video_info or 'NENALEZEN'}")
        print(f"   Oƒçek√°van√Ω zdroj: {expected_source}")
        
        if video_info:
            if expected_source.lower() in video_info.lower():
                print("‚úÖ TEST √öSPƒö≈†N√ù - Zdroj obsahuje oƒçek√°van√Ω text!")
            else:
                print("‚ö†Ô∏è TEST ƒå√ÅSTEƒåNƒö √öSPƒö≈†N√ù - Zdroj nalezen, ale neodpov√≠d√° oƒçek√°v√°n√≠")
        else:
            print("‚ùå TEST NE√öSPƒö≈†N√ù - Zdroj nenalezen")
        
        print("="*60)
        
        print("\n‚ÑπÔ∏è Ponech√°v√°m browser otev≈ôen√Ω pro manu√°ln√≠ kontrolu...")
        print("Zkontrolujte str√°nku a najdƒõte text 'Video: ≈†koda Auto'")
        print("Stisknƒõte Enter pro ukonƒçen√≠...")
        input()
        
        await browser.close()
        return video_info

if __name__ == "__main__":
    result = asyncio.run(test_single_page_extraction())
    print(f"\nFin√°ln√≠ v√Ωsledek: {result}")
